package org.lvu.customize;

import android.app.Activity;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;

import org.lvu.R;
import org.lvu.utils.LogUtil;

import java.io.IOException;
import java.lang.ref.WeakReference;

/**
 * Created by wuyr on 6/6/16 8:50 PM.
 */
public class VideoPlayer extends LinearLayout implements View.OnClickListener {

    private Context mContext;
    private Activity mActivity;
    private MediaPlayer mPlayer;
    private SurfaceView mSurfaceView;
    private ImageView mPlayStatus;
    private View mRootView, mBottomView, mExitBtn, mLoadingBar;
    private TextView mCurrentTime, mTotalTime;
    private SeekBar mProgressbar;
    private boolean isControlButtonsShowing, isReplay,
            isTimingThreadRunning, isOriginallyPlaying;
    private Handler mHandler;

    public VideoPlayer(Context context) {
        super(context);
        init(context);
    }

    public VideoPlayer(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context);
    }

    public VideoPlayer(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context);
    }


    private void init(Context context) {
        mContext = context;
        findViews();
        setListeners();
        initMediaPlayer();
        mHandler = new MyHandler(this);
    }

    private void findViews() {
        mRootView = LayoutInflater.from(mContext).
                inflate(R.layout.customize_video_player_view, this, true);
        mSurfaceView = (SurfaceView) mRootView.findViewById(R.id.surface_view);
        mLoadingBar = mRootView.findViewById(R.id.buffering);
        mPlayStatus = (ImageView) mRootView.findViewById(R.id.play_status);
        mBottomView = mRootView.findViewById(R.id.bottom_view);
        mExitBtn = mRootView.findViewById(R.id.btn_exit);
        mCurrentTime = (TextView) mRootView.findViewById(R.id.current_time);
        mTotalTime = (TextView) mRootView.findViewById(R.id.total_time);
        mProgressbar = (SeekBar) mRootView.findViewById(R.id.progress_bar);
    }

    private void setListeners() {
        mSurfaceView.setOnClickListener(this);
        mSurfaceView.setFocusable(false);
        mSurfaceView.setClickable(false);
        mPlayStatus.setOnClickListener(this);
        mExitBtn.setOnClickListener(this);
        mSurfaceView.getHolder().addCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceCreated(SurfaceHolder holder) {
                mPlayer.setDisplay(holder);
                measure();
            }

            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }

            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {
                if (mPlayer != null) {
                    mPlayer.stop();
                    mPlayer.release();
                    mPlayer = null;
                }
            }
        });
        mProgressbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

            int progress;

            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (fromUser) {
                    pause();
                    this.progress = progress;
                    mCurrentTime.setText(parseToString(progress));
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                isOriginallyPlaying = mPlayer.isPlaying();
                LogUtil.print("origin" + isOriginallyPlaying);
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                mPlayer.seekTo(progress);
                if (isOriginallyPlaying) {
                    LogUtil.print("into if");
                    play();
                    isOriginallyPlaying = false;
                }
                if (!isTimingThreadRunning)
                    startTimingThread();
                if (progress >= mProgressbar.getMax()) {
                    mPlayStatus.setImageResource(R.drawable.ic_continue125);
                    mCurrentTime.setText("00:00");
                    pause();
                    isReplay = true;
                    mPlayer.seekTo(0);
                    mProgressbar.setProgress(0);
                }
            }
        });
    }

    private void measure() {
        int displayWith = mSurfaceView.getWidth(), displayHeight = mSurfaceView.getHeight();
        int vW = mPlayer.getVideoWidth(), vH = mPlayer.getVideoHeight();

        if (vW != 0 && vH != 0) {
            //设置视频的宽度和高度
            ViewGroup.LayoutParams lp = mSurfaceView.getLayoutParams();
            lp.width = displayWith;
            lp.height = displayHeight;
            //视频显示高度要重新调整
            if (vW * displayHeight > displayWith * vH)
                lp.height = displayWith * vH / vW;
                //视频宽度要重新调整
            else if (vW * displayHeight < displayWith * vH)
                lp.width = displayHeight * vW / vH;
            else {
                lp.width = displayWith;
                lp.height = displayHeight;
            }
            mSurfaceView.setLayoutParams(lp);

            mSurfaceView.getHolder().setFixedSize(lp.width, lp.height);
        }
    }

    private void initMediaPlayer() {
        mPlayer = new MediaPlayer();
        mPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
        mPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
            @Override
            public void onPrepared(MediaPlayer mp) {
                mSurfaceView.setFocusable(true);
                mSurfaceView.setClickable(true);
                mLoadingBar.setVisibility(INVISIBLE);
                mProgressbar.setMax(mPlayer.getDuration());
                mTotalTime.setText(parseToString(mPlayer.getDuration()));
                mCurrentTime.setText(parseToString(mPlayer.getCurrentPosition()));
                mPlayer.start();
                startTimingThread();
            }
        });
        mPlayer.setOnBufferingUpdateListener(new MediaPlayer.OnBufferingUpdateListener() {
            @Override
            public void onBufferingUpdate(MediaPlayer mp, int percent) {
                double tmp = percent * 0.01;
                mProgressbar.setSecondaryProgress((int) (mProgressbar.getMax() * tmp));
            }
        });
        mPlayer.setOnInfoListener(new MediaPlayer.OnInfoListener() {
            // 等待缓冲监听
            @Override
            public boolean onInfo(MediaPlayer mp, int what, int extra) {
                switch (what) {
                    case MediaPlayer.MEDIA_INFO_BUFFERING_START:
                        mLoadingBar.setVisibility(View.VISIBLE);
                        break;
                    case MediaPlayer.MEDIA_INFO_BUFFERING_END:
                        // 缓存完成，继续播放
                        mLoadingBar.setVisibility(View.INVISIBLE);
                        break;
                }
                return true;
            }
        });
    }

    private void startTimingThread() {
        new Thread() {
            @Override
            public void run() {
                isTimingThreadRunning = true;
                boolean flag = true;
                while (flag) {
                    if (mPlayer.isPlaying()) {
                        //每隔0.5秒同步一次歌曲播放进度
                        if (mPlayer.getCurrentPosition() < mProgressbar.getMax()) {
                            mProgressbar.setProgress(mPlayer.getCurrentPosition());
                            Message message = new Message();
                            message.obj = parseToString(mPlayer.getCurrentPosition());
                            //UI操作不能在线程中完成，所以需要作异步处理
                            mHandler.sendMessage(message);
                        } else
                            flag = false;
                        try {
                            //线程暂停0.5秒
                            Thread.sleep(100);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
                isTimingThreadRunning = false;
            }
        }.start();
    }

    private void showControlButtons(boolean isShow) {
        mBottomView.setVisibility(isShow ? View.VISIBLE : View.GONE);
        mPlayStatus.setVisibility(mBottomView.getVisibility());
        isControlButtonsShowing = isShow;
    }

    public void setUrlPlay(String url) {
        changeToLandscape();
        try {
            mPlayer.setDataSource(url);
            mPlayer.prepareAsync();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void play() {
        if (!mPlayer.isPlaying())
            mPlayer.start();
        if (!isTimingThreadRunning)
            startTimingThread();
    }

    public void pause() {
        if (mPlayer.isPlaying())
            mPlayer.pause();
    }

    public void replay() {
        if (!mPlayer.isPlaying())
            mPlayer.start();
        startTimingThread();
    }

    public void exit() {
        // TODO: 6/15/16 use the play.stop() instead of release() don't real 'exit'
        //TODO: call back surfaceDestroyed() player.stop();
        mRootView.setVisibility(GONE);
        if (mActivity.getResources().getConfiguration().orientation
                != ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
            mActivity.setRequestedOrientation(
                    ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
            mActivity.getWindow().getDecorView().setSystemUiVisibility(
                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
        }
        try{
        if (mPlayer != null) {
            mPlayer.stop();
            mPlayer.release();
            mPlayer = null;
        }
        if (mSurfaceView != null) {
            mSurfaceView.destroyDrawingCache();
            mSurfaceView = null;
        }}catch(Exception e){
e.printStackTrace();
}
    }

    private void changeToLandscape() {
        if (mActivity.getResources().getConfiguration().orientation
                != ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
            mActivity.setRequestedOrientation(
                    ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
            int uiFlags = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
                    | View.SYSTEM_UI_FLAG_FULLSCREEN; // hide status bar
            uiFlags |= 0x00001000;
            mActivity.getWindow().getDecorView().setSystemUiVisibility(uiFlags);
        }
    }

    public void setActivity(Activity activity) {
        mActivity = activity;
    }

    //将MediaPlayer返回毫秒解释成 分:秒
    private String parseToString(int time) {
        //转成分
        int minutes = time / 1000 / 60;
        //转成秒
        int seconds = time / 1000 % 60;
        //得到的分秒若小于10，即个位数则前面2加0，否则直接转换成String （三目运算）
        String mm = minutes < 10 ? "0" + minutes : String.valueOf(minutes),
                ss = seconds < 10 ? "0" + seconds : String.valueOf(seconds);
        //以 04:23 的形式返回
        return mm + ":" + ss;
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.surface_view:
                showControlButtons(!isControlButtonsShowing);
                break;
            case R.id.btn_exit:
                exit();
                break;
            case R.id.play_status:
                if (mPlayer.isPlaying()) {
                    pause();
                    mPlayStatus.setImageResource(R.drawable.ic_continue125);
                } else {
                    if (isReplay) {
                        replay();
                        isReplay = false;
                    } else play();
                    mPlayStatus.setImageResource(R.drawable.ic_pause125);
                }
                break;
            default:
                break;
        }
    }

    static class MyHandler extends Handler {

        private WeakReference<VideoPlayer> mClass;

        public MyHandler(VideoPlayer clazz) {
            mClass = new WeakReference<>(clazz);
        }

        @Override
        public void handleMessage(Message msg) {
            mClass.get().mCurrentTime.setText((String) msg.obj);
            if (msg.obj.equals(mClass.get().mTotalTime.getText().toString())) {
                mClass.get().showControlButtons(true);
                mClass.get().mProgressbar.setProgress(0);
                mClass.get().mPlayStatus.setImageResource(R.drawable.ic_continue125);
                mClass.get().mCurrentTime.setText("00:00");
                mClass.get().isReplay = true;
            }
        }
    }
}
